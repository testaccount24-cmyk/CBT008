  CONCERNING REPLACEMENT OR NON-REPLACEMENT OF ./ TO >< AND VICE-VERSA
  ---------- ----------- -- --------------- -- -- -- -- --- ----------

The PDSLOAD program (which performs a lot of the functionality of
IEBUPDTE) loads a partitioned dataset from a sequentialized version
of it, using "./ ADD NAME=memname" cards to separate what should be
each member.

Sometimes, such a sequentialized pds (now a PS sequential file) is
itself a member of a pds.  And we package CBT Tape files that way
quite often.  The CBT Tape file is itself a pds, but some of IT'S
members are sequentialized pds'es, containing a lot of "./ ADD NAME="
cards beginning in column 1.  How do we prevent IEBUPDTE, or PDSLOAD,
from unwanted expansion of these "inner" pds'es, while we are busy
reloading the "outer" pds?

What we do, while we are sequentializing the outer pds, is that
automatically, using either the LISTPDS program or the OFFLOAD
program, we change all "./ ADD NAME=memname" to ">< ADD NAME=memname"
in the inner pds.  Then, when we go the opposite way, to make a pds
out of the "outer" sequential file, the inner pds remains as a single
sequential file, and there is no confusion between any >< cards in the
inner pds, and the ./ cards in the outer pds.  There are simply no ./
cards in the inner pds.  They are all changed to ><.  Upon expansion
of the outer pds, the inner pds remains a single member in the
expanded outer pds that was created (by IEBUPDTE or PDSLOAD) from the
"outer" sequentialized pds file.

In order to further expand the "inner pds" which is now a member of
the "outer" pds (which is a pds), we have to change all the "><"
strings in IT, to "./" strings in column 1.  The PDSLOAD program does
this automatically, when we tell it to, using a PARM of UPDTE(><).

Nowadays, with new expanded techniques in packaging CBT Tape files,
this leads to a problem.  A member of a pds on a CBT Tape file, may
not only be a "sequentialized pds", sequentialized using IEBUPDTE or
LISTPDS, or OFFLOAD, and containing the >< string in column 1
purposely.  It may also be other stuff that possibly might contain the
string >< in column 1 of the (FB-80) pds member.  And how can that
happen?

We sometimes fold zip files as FB-80, and include them as members of
an FB-80 pds, in a CBT Tape file.  Sometimes the member might be a
folded over Word docx file, or a PDF file, or it might even be a file
of a load module in Greg Price's REVLOAD format.  If it would happen
that the string >< lands in column 1, PDSLOAD would automatically
change it to a ./ string, and that would wreak a lot of havoc in a
zip file, and considerable havoc in a Word or PDF file.


HOW DO WE STOP THAT?

An excellent programmer, a person with much experience in this area,
has created a way to flag these "exceptional cases" using the
optional DDNAME of SYSUPLOG, to be used by both the LISTPDS and
PDSLOAD programs.  The LISTPDS program which sequentialized the pds
orignally, flags which records have the string >< in column 1.  And
the PDSLOAD program, which re-creates the pds from its sequentialized
form, reads that "exception file" and purposely DOES NOT change the
>< (which should be there) back to ./ (which shouldn't be there).

This preserves the integrity of the CBT Tape files when they are
reloaded to disk.  If you use the UPDATEO proc to restore a CBT Tape
file, you absolutely need access to the already-created SYSUPLOG
file which was made when the CBT Tape file was created.  An IEBUPDTE
unloaded version of this file is found in member SYSUPLOG in CBT File
008, and the job to re-create the file is called SYSUPLO$.  Please
make sure this file is present when you do PDSLOAD reloads from CBT
Tape files.

The NEWTnnnx members of File 008 and the VnnnJmxx members of this
pds have been changed to add this DDNAME for all LISTPDS invocations.
This seems to have solved the problem of file integrity in the
disk expansions of all the CBT Tape files.

One problem is that to properly load some of the CBT Tape disk files
from tape, you need to have the SYSUPLOG file made by LISTPDS to create
the tape.  So for each level of the CBT Tape, we provide that SYSUPLOG
file here.  Just look at this pds (CBT File 008) and run the SYSUPLO$
job against the SYSUPLOG member of CBT File 008, and you will generate
the proper SYSUPLOG file.  Then you can run the VnnnJmm jobs properly.


Sam Golob    -   2015/10/21  -  email:  sbgolob@cbttape.org


