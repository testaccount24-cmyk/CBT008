//SBGOLOBE JOB ,'SAM GOLOB',CLASS=A,
//    MSGCLASS=X,NOTIFY=&SYSUID
//*
//* THIS JOB IS NOW SPLIT INTO SEVEN SEPARATE JOBS BECAUSE OF
//* IBM'S RESTRICTION THAT A JOB MAY NOT HAVE MORE THAN
//* 255 STEPS. THE FIRST JOB HAS 200 STEPS THE SECOND THE REST.
//* THE SEVENTH JOB WILL LOAD FILE 001 OF THE TAPE INTO A PRE-
//* DEFINED VSAM CLUSTER FOR INFO/MVS DATABASE PROCESSING (YOU
//* HAVE TO HAVE INFOMVS).
//*
//*
//*  YOU MAY HAVE A PROBLEM WITH SOME OF THESE FILES THAT ARE
//*  IEBCOPIED DOWN IF YOU TRY TO DROP TO A NON-3350 TYPE
//*  DEVICE SINCE MOST INPUT WAS FULL TRACK BLOCKED ON A 3350.
//*  THE ORIGINAL DCB'S ARE MARKED BELOW. YOU CAN DROP DOWN LOAD
//*  MODULES INTO A SMALLER BLOCKSIZE PDS, HOWEVER YOU WILL GET A
//*  WARNING MESSAGE AND YOU WILL NOT BE ABLE TO DO A COMPRESS
//*  IN PLACE ON THAT LIBRARY UNTIL YOU GET RID OF THE OFFENDING
//*  MEMBERS OR RELINK THEM BACK IN
//*
//*  YOU WILL GET THE FOLLOWING MESSAGE:
//*  IEB175I - WARNING INPUT RECORD IS GREATER THAN OUTPUT BLKSIZE
//*            DDNAME=XXXXXXXX,OUTPUT TTRN=00000000
//*
//*
//ASMFCL PROC  V1=CBT508,      -   INPUT TAPE VOLUME
//*            VO=CBTA01,      -   OUTPUT DASD VOLUME
//             P=CBT973,           DECOMPRESSION PROGRAM
//             LAB=002,            INPUT TAPE LABEL NUMBER FOR PROGRAM
//             CLASS=A,        -   SYSOUT CLASS
//             WORK1=SYSDA,        DASD OUTPUT TYPE
//             WORK2=SYSDA,        DASD WORK TYPE
//             INDEX='CBT.V508', - FIRST LEVEL INDEX FOR DSNAME
//             DSP=PASS,           OUTPUT DATASET DISPOSITION
//             UNT=562,        -   TYPE UNIT NAME
//             TY=NL,              TAPE FILE LABEL
//             PRI=1,              PRIMARY ALLOCATION
//             SEC=1,              SECONDARY ALLOCATION
//             DIR=1,              NUMBER OF DIRECTORY BLOCKS
//             ALLOC=TRK,          ALLOC INCREMENT
//             LR=80,              LRECL
//             BKI=32720,          INPUT BLOCKSIZE
//             FM=FB               RECFM
//ASM     EXEC  PGM=ASMA90,REGION=1024K,COND=EVEN,PARM='OBJECT,NODECK'
//*SM     EXEC  PGM=IEV90,REGION=1024K,COND=EVEN,PARM='OBJECT,NODECK'
//SYSPRINT DD  SYSOUT=&CLASS
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.MODGEN,DISP=SHR
//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2
//SYSUT2   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2
//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2
//SYSPUNCH DD  DUMMY
//SYSLIN   DD  DSN=&INDEX..FILE&LAB..OBJ,DISP=(NEW,&DSP),
//             UNIT=&WORK1,FREE=CLOSE,
//             SPACE=(&ALLOC,(&PRI,&SEC),RLSE) VOL=SER=&VO
//SYSIN    DD  UNIT=&UNT,VOL=(,RETAIN,SER=&V1),DISP=(OLD,PASS),
//             DCB=(RECFM=&FM,LRECL=&LR,BLKSIZE=&BKI),
//             LABEL=(&LAB,&TY,EXPDT=98000)
//LKED     EXEC  PGM=IEWL,REGION=600K,COND=(4,LT,ASM),PARM=LIST
//SYSPRINT DD  SYSOUT=&CLASS
//SYSUT1   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2
//SYSLMOD  DD  DSN=&INDEX..FILE&LAB..LOAD(&P),DISP=(NEW,&DSP),
//             UNIT=&WORK1,
//             SPACE=(&ALLOC,(&PRI,&SEC,&DIR),RLSE) VOL=SER=&VO
//SYSLIN   DD  DSN=&INDEX..FILE&LAB..OBJ,DISP=(OLD,&DSP),
//             LABEL=(&LAB,&TY)
//       PEND
//COPY   PROC  V1=CBT508,          INPUT TAPE VOLUME
//             VO=CBTA01,          OUTPUT DASD VOLUME
//             LAB=,               INPUT TAPE LABEL NUMBER
//             CLASS=A,            SYSOUT CLASS
//             WORK1=SYSDA,        DASD OUTPUT TYPE
//             WORK2=SYSDA,        DASD WORK TYPE
//             INDEX='CBT.V508',   FIRST LEVEL INDEX FOR DSNAME
//             TYPE=PDS,           THIRD LEVEL TYPE FOR DSNAME
//             DSP=CATLG,          OUTPUT DATASET DISPOSITION
//             UNT=562,            TYPE UNIT NAME
//             TY=NL,              TAPE FILE LABEL
//             PRI=190,            PRIMARY ALLOCATION
//             SEC=190,            SECONDARY ALLOCATION
//             DIR=92,             NUMBER OF DIRECTORY BLOCKS
//             ALLOC=TRK           ALLOC INCREMENT
//COPY     EXEC  PGM=IEBCOPY,REGION=600K,COND=EVEN
//SYSPRINT DD  SYSOUT=&CLASS
//SYSUT3   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2
//SYSUT4   DD  SPACE=(CYL,(10,10)),UNIT=&WORK2
//SYSUT1   DD  UNIT=&UNT,VOL=(,RETAIN,SER=&V1),DISP=(OLD,PASS),
//             LABEL=(&LAB,&TY,EXPDT=98000)
//SYSUT2   DD  DSN=&INDEX..FILE&LAB..&TYPE,DISP=(NEW,&DSP),
//             UNIT=&WORK1,FREE=CLOSE,
//             SPACE=(&ALLOC,(&PRI,&SEC,&DIR),RLSE),VOL=SER=&VO
//SYSIN    DD  DUMMY
//       PEND
//GENERO PROC  V1=CBT508,          INPUT TAPE VOLUME
//             VO=CBTA01,          OUTPUT DASD VOLUME
//             LAB=,               INPUT TAPE LABEL NUMBER
//             CLASS=A,            SYSOUT CLASS
//             WORK1=SYSDA,        DASD OUTPUT TYPE
//             INDEX='CBT.V508',   FIRST LEVEL INDEX FOR DSNAME
//             TYPE=DATA,          THIRD LEVEL TYPE FOR DSNAME
//             DSP=CATLG,          OUTPUT DATASET DISPOSITION
//             UNT=562,            TYPE UNIT NAME
//             TY=NL,              TAPE FILE LABEL
//             PRI=190,            PRIMARY ALLOCATION
//             SEC=190,            SECONDARY ALLOCATION
//             ALLOC=TRK,          ALLOC INCREMENT
//             LR=80,              LRECL
//             BKI=32720,          INPUT BLOCKSIZE
//             BKO=5600,           OUTPUT BLOCKSIZE
//             FM=FB               RECFM
//GENER    EXEC  PGM=IEBGENER,REGION=600K,COND=EVEN
//SYSPRINT DD  SYSOUT=&CLASS
//SYSUT1   DD  UNIT=&UNT,VOL=(,RETAIN,SER=&V1),DISP=(OLD,PASS),
//             DCB=(RECFM=&FM,LRECL=&LR,BLKSIZE=&BKI),
//             LABEL=(&LAB,&TY,EXPDT=98000)
//SYSUT2   DD  DSN=&INDEX..FILE&LAB..&TYPE,DISP=(NEW,&DSP),
//             UNIT=&WORK1,FREE=CLOSE,
//             DCB=(RECFM=&FM,LRECL=&LR,BLKSIZE=&BKO),
//             SPACE=(&ALLOC,(&PRI,&SEC),RLSE),VOL=SER=&VO
//SYSIN    DD  DUMMY
//       PEND
//UPDATEO PROC V1=CBT508,          INPUT TAPE VOLUME
//             P=CBT973,           DECOMPRESSION PROGRAM
//             P1=PDSLOAD,    (ISPF STATS AND MUCH QUICKER - USE THIS
//*                             PROGRAM INSTEAD OF IEBUPDTE. FILE 093)
//*            P1=IEBUPDTE,   PROGRAM TO PROCESS IEBUPDTE SYSIN
//*                           STREAM. YOU MAY USE THE NORMAL IBM PGM
//*                           OR YOU MAY HAVE INSTALLED THE PDSLOAD
//*                           PROGRAM FROM FILE 316 OF THE CBT TAPE
//*                           WHICH IS USEFUL FOR FILES UNLOADED BY
//*                           THE FAMOUS YALE OFFLOAD PROGRAM. CAN
//*                           CHANGE THE IMBEDDED '><' TO './' AT
//*                           RELOAD.
//*   ---->                    IF PDSLOAD,  USE SYSUT1 DD
//*   ---->                    IF IEBUPDTE, USE SYSIN  DD
//             STEPLB='CBT.V508.CBTCREAT.LOAD', LIBRARY CONTAINS PGM=P1
//             S='UPDTE(><)',      'NEW'           IF IEBUPDTE
//*   ---->                        'UPDTE(><)'     IF PDSLOAD
//             VO=CBTA01,          OUTPUT DASD VOLUME
//             LAB=,               INPUT TAPE LABEL NUMBER
//             CLASS=A,            SYSOUT CLASS
//             WORK1=SYSDA,        DASD OUTPUT TYPE
//             INDEX='CBT.V508',   FIRST LEVEL INDEX FOR DSNAME
//             TYPE=PDS,           THIRD LEVEL TYPE FOR DSNAME
//             DSP=CATLG,          OUTPUT DATASET DISPOSITION
//             UNT=562,            TYPE UNIT NAME
//             TY=NL,              TAPE FILE LABEL
//             PRI=190,            PRIMARY ALLOCATION
//             SEC=190,            SECONDARY ALLOCATION
//             DIR=92,             NUMBER OF DIRECTORY BLOCKS
//             ALLOC=TRK,          ALLOC INCREMENT
//             LR=80,              LRECL
//             BKI=32720,          INPUT BLOCKSIZE
//             BKO=5600,           OUTPUT BLOCKSIZE
//             FM=FB               RECFM
//UPDATE1  EXEC  PGM=&P,REGION=512K,COND=EVEN
//STEPLIB  DD  DSN=CBT.V508.CBTCREAT.LOAD,DISP=SHR
//INPUT    DD  UNIT=&UNT,VOL=(,RETAIN,SER=&V1),DISP=(OLD,PASS),
//             DCB=(RECFM=VB,LRECL=94,BLKSIZE=&BKI),
//             LABEL=(&LAB,&TY,EXPDT=98000)
//OUTPUT   DD  DSN=&&TEMP,DISP=(NEW,PASS),
//             UNIT=&WORK1,
//             DCB=(RECFM=&FM,LRECL=&LR,BLKSIZE=&BKO),
//             SPACE=(&ALLOC,(&PRI,&SEC),RLSE) VOL=SER=&VO
//UPDATE2  EXEC  PGM=&P1,PARM='&S',COND=EVEN
//STEPLIB  DD  DSN=&STEPLB,DISP=SHR
//SYSPRINT DD  SYSOUT=&CLASS     <<====  DUMMY OUT TO CUT PRINTOUT
//*                            IF PDSLOAD,  USE SYSUT1 DD
//*                            IF IEBUPDTE, USE SYSIN  DD
//*YSIN    DD  DSN=&&TEMP,DISP=(OLD,DELETE)
//SYSUPLOG DD  DISP=SHR,DSN=CBT.V508.SYSUPLOG(FILE&LAB)
//SYSUT1   DD  DSN=&&TEMP,DISP=(OLD,DELETE)
//SYSUT2   DD  DSN=&INDEX..FILE&LAB..&TYPE,DISP=(NEW,&DSP),
//             UNIT=&WORK1,FREE=CLOSE,
//             DCB=(RECFM=&FM,LRECL=&LR,BLKSIZE=&BKO),
//             SPACE=(&ALLOC,(&PRI,&SEC,&DIR),RLSE),VOL=SER=&VO
//       PEND
//GENER  PROC  V1=CBT508,          INPUT TAPE VOLUME
//             VO=CBTA01,          OUTPUT DASD VOLUME
//             P=CBT973,           DECOMPRESSION PROGRAM
//             LAB=,               INPUT TAPE LABEL NUMBER
//             WORK1=SYSDA,        DASD OUTPUT TYPE
//             INDEX='CBT.V508',   FIRST LEVEL INDEX FOR DSNAME
//             TYPE=DATA,          THIRD LEVEL TYPE FOR DSNAME
//             DSP=CATLG,          OUTPUT DATASET DISPOSITION
//             UNT=562,            TYPE UNIT NAME
//             TY=NL,              TAPE FILE LABEL
//             PRI=190,            PRIMARY ALLOCATION
//             SEC=190,            SECONDARY ALLOCATION
//             ALLOC=TRK,          ALLOC INCREMENT
//             LR=80,              LRECL
//             BKI=32716,          INPUT BLOCKSIZE
//             BKO=5600,           OUTPUT BLOCKSIZE
//             FM=FB               RECFM
//GENER    EXEC  PGM=&P,REGION=512K,COND=EVEN
//STEPLIB  DD  DSN=CBT.V508.CBTCREAT.LOAD,DISP=SHR
//INPUT    DD  UNIT=&UNT,VOL=(,RETAIN,SER=&V1),DISP=(OLD,PASS),
//             DCB=(RECFM=VB,LRECL=94,BLKSIZE=&BKI),
//             LABEL=(&LAB,&TY,EXPDT=98000)
//OUTPUT   DD  DSN=&INDEX..FILE&LAB..&TYPE,DISP=(NEW,&DSP),
//             UNIT=&WORK1,FREE=CLOSE,
//             DCB=(RECFM=&FM,LRECL=&LR,BLKSIZE=&BKO),
//             SPACE=(&ALLOC,(&PRI,&SEC),RLSE),VOL=SER=&VO
//       PEND
//*--------------------------------------------------------------*//
//*----  THE STEPS BELOW ARE REPEATED IN FILE 004, IF YOU   -----*//
//*----    ARE A NON-CARTRIDGE INSTALLATION LOADING THIS    -----*//
//*----    TAPE FROM TWO REELS.                             -----*//
//*----  IF YOU ARE LOADING FROM A CARTRIDGE, THERE IS NO   -----*//
//*----    ADDITIONAL JCL NECESSARY.                        -----*//
//*--------------------------------------------------------------*//
//STEP601     EXEC UPDATEO,LAB=601
//STEP602     EXEC UPDATEO,LAB=602
//STEP603     EXEC UPDATEO,LAB=603
//STEP604     EXEC UPDATEO,LAB=604
//STEP605     EXEC UPDATEO,LAB=605
//STEP606     EXEC UPDATEO,LAB=606
//STEP607     EXEC UPDATEO,LAB=607
//STEP608     EXEC UPDATEO,LAB=608
//STEP609     EXEC UPDATEO,LAB=609
//STEP610     EXEC UPDATEO,LAB=610
//STEP611     EXEC UPDATEO,LAB=611
//STEP612     EXEC UPDATEO,LAB=612
//STEP613     EXEC UPDATEO,LAB=613
//STEP614     EXEC UPDATEO,LAB=614
//STEP615     EXEC UPDATEO,LAB=615
//STEP616     EXEC UPDATEO,LAB=616
//STEP617     EXEC COPY,LAB=617
//STEP618     EXEC UPDATEO,LAB=618
//STEP619     EXEC UPDATEO,LAB=619
//STEP620     EXEC UPDATEO,LAB=620
//STEP621     EXEC UPDATEO,LAB=621
//STEP622     EXEC UPDATEO,LAB=622
//STEP623     EXEC UPDATEO,LAB=623
//STEP624     EXEC UPDATEO,LAB=624
//STEP625     EXEC UPDATEO,LAB=625
//STEP626     EXEC UPDATEO,LAB=626
//STEP627     EXEC UPDATEO,LAB=627
//STEP628     EXEC UPDATEO,LAB=628
//STEP629     EXEC UPDATEO,LAB=629
//STEP630     EXEC UPDATEO,LAB=630
//STEP631     EXEC UPDATEO,LAB=631
//STEP632     EXEC UPDATEO,LAB=632
//STEP633     EXEC UPDATEO,LAB=633
//STEP634     EXEC UPDATEO,LAB=634
//STEP635     EXEC UPDATEO,LAB=635
//STEP636     EXEC UPDATEO,LAB=636
//STEP637     EXEC UPDATEO,LAB=637
//STEP638     EXEC UPDATEO,LAB=638
//STEP639     EXEC UPDATEO,LAB=639
//STEP640     EXEC UPDATEO,LAB=640
//STEP641     EXEC UPDATEO,LAB=641
//STEP642     EXEC UPDATEO,LAB=642
//STEP643     EXEC UPDATEO,LAB=643
//STEP644     EXEC UPDATEO,LAB=644
//STEP645     EXEC UPDATEO,LAB=645
//STEP646     EXEC UPDATEO,LAB=646
//STEP647     EXEC UPDATEO,LAB=647
//STEP648     EXEC UPDATEO,LAB=648
//STEP649     EXEC UPDATEO,LAB=649
//STEP650     EXEC UPDATEO,LAB=650
//STEP651     EXEC UPDATEO,LAB=651
//STEP652     EXEC UPDATEO,LAB=652
//STEP653     EXEC UPDATEO,LAB=653
//STEP654     EXEC UPDATEO,LAB=654
//STEP655     EXEC UPDATEO,LAB=655
//STEP656     EXEC UPDATEO,LAB=656
//STEP657     EXEC UPDATEO,LAB=657
//STEP658     EXEC UPDATEO,LAB=658
//STEP659     EXEC UPDATEO,LAB=659
//STEP660     EXEC UPDATEO,LAB=660
//STEP661     EXEC UPDATEO,LAB=661
//STEP662     EXEC UPDATEO,LAB=662
//STEP663     EXEC UPDATEO,LAB=663
//STEP664     EXEC UPDATEO,LAB=664
//STEP665     EXEC UPDATEO,LAB=665
//STEP666     EXEC UPDATEO,LAB=666
//STEP667     EXEC UPDATEO,LAB=667
//STEP668     EXEC UPDATEO,LAB=668
//STEP669     EXEC UPDATEO,LAB=669
//STEP670     EXEC UPDATEO,LAB=670
//STEP671     EXEC UPDATEO,LAB=671
//STEP672     EXEC UPDATEO,LAB=672
//STEP673     EXEC UPDATEO,LAB=673
//STEP674     EXEC UPDATEO,LAB=674
//STEP675     EXEC UPDATEO,LAB=675
//STEP676     EXEC UPDATEO,LAB=676
//STEP677     EXEC UPDATEO,LAB=677
//STEP678     EXEC UPDATEO,LAB=678
//STEP679     EXEC UPDATEO,LAB=679
//STEP680     EXEC UPDATEO,LAB=680
//STEP681     EXEC UPDATEO,LAB=681
//STEP682     EXEC UPDATEO,LAB=682
//STEP683     EXEC UPDATEO,LAB=683
//STEP684     EXEC UPDATEO,LAB=684
//STEP685     EXEC UPDATEO,LAB=685
//STEP686     EXEC UPDATEO,LAB=686
//STEP687     EXEC UPDATEO,LAB=687
//STEP688     EXEC UPDATEO,LAB=688
//STEP689     EXEC UPDATEO,LAB=689
//STEP690     EXEC UPDATEO,LAB=690
//STEP691     EXEC UPDATEO,LAB=691
//STEP692     EXEC UPDATEO,LAB=692
//STEP693     EXEC UPDATEO,LAB=693
//STEP694     EXEC UPDATEO,LAB=694
//STEP695     EXEC UPDATEO,LAB=695
//STEP696     EXEC UPDATEO,LAB=696
//STEP697     EXEC UPDATEO,LAB=697
//STEP698     EXEC UPDATEO,LAB=698
//STEP699     EXEC UPDATEO,LAB=699
//STEP700     EXEC UPDATEO,LAB=700
